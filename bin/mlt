#!/usr/bin/env python
"""mlt.
Usage:
  mlt (-h | --help)
  mlt --version
  mlt init [--template=<template>] <name>
  mlt build [--watch]
  mlt deploy
  mlt templates list

Options:
  --template=<template>  Template name for app
                         initialization [default: tf-single-node].
"""
import sys
import shutil
import os
import uuid
import json
import time
import os.path
import subprocess

from docopt import docopt
from string import Template
from subprocess import call, check_output
from watchdog.observers import Observer
from watchdog.events import LoggingEventHandler

class EventHandler:
  def __init__(self, args):
    self.args = args
  
  def dispatch(self, event):
    do_build(self.args)


def build(args):
  do_build(args)

  if args['--watch']:
    event_handler = EventHandler(args)
    observer = Observer()
    observer.schedule(event_handler, './', recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

def do_build(args):
  config = json.load(open('.studio.json'))
  app_name = config['name']
  namespace = config['namespace']

  container_id = str(uuid.uuid4())
  run_id = str(uuid.uuid4())
  container_name = app_name + ":" + container_id
  remote_container_name = "gcr.io/" + config['gceProject'] + "/" + container_name

  print("Build container %s..." % container_name)
  run(["docker", "build", "-t", container_name, "."])
  print("Built container %s" % container_name)

  print("Push container %s to registry..." % container_name)
  run(["docker", "tag", container_name, remote_container_name])
  run(["gcloud", "docker", "--", "push", remote_container_name])

  # Write last container to file
  with open('.status.json', 'w') as f:
    f.write(json.dumps({
      "last_run": run_id,
      "last_container": remote_container_name
    }))

  print("Pushed container %s to registry" % container_name)


def deploy(args):
  if not os.path.isfile('.status.json'):
    do_build(args)

  print("Deploy")
  config = json.load(open('.studio.json'))
  app_name = config['name']
  namespace = config['namespace']

  status = json.load(open('.status.json'))
  remote_container_name = status['last_container']
  run_id = status['last_run']

  # Write new container to deployment
  for filename in os.listdir("k8s-templates"):
    with open('k8s-templates/' + filename) as f:
      deployment_template = f.read()
      s = Template(deployment_template)
      out = s.substitute(image=remote_container_name, app=app_name, run=run_id)

      with open('k8s/' + filename,'w') as f:
        f.write(out)

    ensure_namespace_exists(namespace)
    run(["kubectl", "--namespace", namespace, "apply", "-R", "-f", "k8s"])


def init(args):
  template_directory = "/".join([os.path.dirname(__file__), "..", "templates", args["--template"]])
  app_name = args["<name>"]
  try:
    shutil.copytree(template_directory, app_name)

    raw_project_bytes = check_output(["gcloud", "config", "list", "--format", "value(core.project)"])
    project = raw_project_bytes.decode("utf-8").strip()

    with open(app_name + '/.studio.json','w') as f:
      f.write('''
{
  "name": "%s",
  "namespace": "%s",
  "gceProject": "%s"
}
''' % (app_name, app_name, project))

  except OSError as exc:
    if exc.errno == 17:
      print("Directory '%s' already exists: delete before trying to initialize new application" % app_name)
    else:
      print(exc)


def ensure_namespace_exists(ns):
  exit_code = call(["kubectl", "get", "namespace", ns], stdout=open(os.devnull, 'wb'))
  if exit_code is not 0:
    run(["kubectl", "create", "namespace", ns])

def run(command):
  try:
    output = check_output(command)
  except subprocess.CalledProcessError as e:
    print(e.output)
    sys.exit(1)

  return output

def main():
    args = docopt(__doc__, version="ML Container Templates v0.0.1")

    if args["init"]:
       init(args)

    if args["build"]:
      build(args)

    if args["deploy"]:
      deploy(args)

main()
