#!/usr/bin/env python
"""tfs.
Usage:
  tfs (-h | --help)
  tfs --version
  tfs init [--framework=<tf,neon,mxnet>] <name>
  tfs deploy
"""
import sys
import shutil
import os
import uuid
import json
import time

from docopt import docopt
from string import Template
from subprocess import call

def main():
    template_directory = "/".join([os.path.dirname(__file__), "..", "template"])

    args = docopt(__doc__, version="Container Studio v0.0.1")
    if args["init"]:
        app_name = args["<name>"]
        try:
          shutil.copytree(template_directory, app_name)

          with open(app_name + '/.studio.json','w') as f:
            f.write('''
{
  "name": "%s",
  "gceProject": "%s"
}
''' % (app_name, "personal-175700"))

        except OSError as exc:
          if exc.errno == 17:
            print("Directory '%s' already exists: delete before trying to initialize new application" % app_name)
          else:
            print(exc)

    if args["deploy"]:
      config = json.load(open('.studio.json'))
      app_name = config['name']

      container_id = str(uuid.uuid4())
      run = str(uuid.uuid4())
      container_name = app_name + ":" + container_id
      remote_container_name = "gcr.io/" + config['gceProject'] + "/" + container_name

      print("Build container %s" % container_name)
      call(["docker", "build", "-t", container_name, "."])

      print("Push container %s" % container_name)
      call(["docker", "tag", container_name, remote_container_name])
      call(["gcloud", "docker", "--", "push", remote_container_name])

      print("Deploy")

      # Write new container to deployment
      with file('job.yaml') as f:
        deployment_template = f.read()
        s = Template(deployment_template)
        out = s.substitute(image=remote_container_name, app=app_name, run=run)

        with open('k8s/job.yaml','w') as f:
          f.write(out)

      call(["kubectl", "apply", "-R", "-f", "k8s"])

main()
